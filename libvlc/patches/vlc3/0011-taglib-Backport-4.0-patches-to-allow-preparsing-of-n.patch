From 2049af159b241b9f7786ad02bd144c1ae8f25c5c Mon Sep 17 00:00:00 2001
Message-Id: <2049af159b241b9f7786ad02bd144c1ae8f25c5c.1615545496.git.hugo@beauzee.fr>
From: =?UTF-8?q?Hugo=20Beauz=C3=A9e-Luyssen?= <hugo@beauzee.fr>
Date: Fri, 12 Mar 2021 11:34:02 +0100
Subject: [PATCH] taglib: Backport 4.0 patches to allow preparsing of network
 files

Cherry-picked from:
8191ac5727a3525a6bee99e1674167a7894f9ccb
31e9e3d6ca32c9ee0fb4f7d5617c1c62d3d3e222
a4f4e40465fec75c02422ac3a9d32713ef98fc2f
84962e474bfefa242527f7c3ddffe6ed4f697fbe
3533f90eb44398abe6cff1b14ece757654449acf
026a76066efa78f1934ab2c177669a2e6a519cff
4bc7607f31f80264b5e61fbd187f2f8d2f3bb604
976cd219465a72daa02d22e60c9ac4c704c0b18b
be4f907a0e834c10277b8217520f745238da1c13
0cbcf504b43a02ddb7ecc1c65c0c1e82f39b4f1c
837b583e4e4e531ff8b11f13300c7cbc565beb9f
d375284a144e6b18896deda3a86b9560bc04f3d8
8ec8b0d2add84b6d6b0c043e1c4f241998915ecd
8191ac5727a3525a6bee99e1674167a7894f9ccb
---
 configure.ac                                  |   2 +-
 ...ent-ID3v2-readStyle-avoid-worst-case.patch | 148 +++++++
 contrib/src/taglib/rules.mak                  |   1 +
 modules/meta_engine/taglib.cpp                | 379 ++++++++++--------
 4 files changed, 358 insertions(+), 172 deletions(-)
 create mode 100644 contrib/src/taglib/0001-Implement-ID3v2-readStyle-avoid-worst-case.patch

diff --git a/configure.ac b/configure.ac
index 348bb63c78..d8909ad625 100644
--- a/configure.ac
+++ b/configure.ac
@@ -4155,7 +4155,7 @@ AC_ARG_ENABLE(taglib,
   [AS_HELP_STRING([--disable-taglib],
     [do not use TagLib (default enabled)])])
 AS_IF([test "${enable_taglib}" != "no"], [
-  PKG_CHECK_MODULES(TAGLIB, taglib >= 1.9, [
+  PKG_CHECK_MODULES(TAGLIB, taglib >= 1.11, [
     VLC_ADD_PLUGIN([taglib])
   ], [
     AC_MSG_WARN([${TAGLIB_PKG_ERRORS}.])])
diff --git a/contrib/src/taglib/0001-Implement-ID3v2-readStyle-avoid-worst-case.patch b/contrib/src/taglib/0001-Implement-ID3v2-readStyle-avoid-worst-case.patch
new file mode 100644
index 0000000000..756250a3c8
--- /dev/null
+++ b/contrib/src/taglib/0001-Implement-ID3v2-readStyle-avoid-worst-case.patch
@@ -0,0 +1,148 @@
+From 94b8f426233e87c0b3783b743ad5e3ed458147b1 Mon Sep 17 00:00:00 2001
+From: Francois Cartegnie <fcvlcdev@free.fr>
+Date: Tue, 11 Aug 2020 10:53:31 +0200
+Subject: [PATCH] Implement ID3v2 readStyle, avoid worst case
+
+---
+ taglib/mpeg/mpegfile.cpp | 22 +++++++++++++---------
+ taglib/mpeg/mpegfile.h   | 13 ++++++++-----
+ taglib/toolkit/taglib.h  |  3 +++
+ 3 files changed, 24 insertions(+), 14 deletions(-)
+
+diff --git a/taglib/mpeg/mpegfile.cpp b/taglib/mpeg/mpegfile.cpp
+index af7253fa..59443027 100644
+--- a/taglib/mpeg/mpegfile.cpp
++++ b/taglib/mpeg/mpegfile.cpp
+@@ -80,30 +80,31 @@ public:
+ // public members
+ ////////////////////////////////////////////////////////////////////////////////
+ 
+-MPEG::File::File(FileName file, bool readProperties, Properties::ReadStyle) :
++MPEG::File::File(FileName file,
++                 bool readProperties, Properties::ReadStyle readStyle) :
+   TagLib::File(file),
+   d(new FilePrivate())
+ {
+   if(isOpen())
+-    read(readProperties);
++    read(readProperties, readStyle);
+ }
+ 
+ MPEG::File::File(FileName file, ID3v2::FrameFactory *frameFactory,
+-                 bool readProperties, Properties::ReadStyle) :
++                 bool readProperties, Properties::ReadStyle readStyle) :
+   TagLib::File(file),
+   d(new FilePrivate(frameFactory))
+ {
+   if(isOpen())
+-    read(readProperties);
++    read(readProperties, readStyle);
+ }
+ 
+ MPEG::File::File(IOStream *stream, ID3v2::FrameFactory *frameFactory,
+-                 bool readProperties, Properties::ReadStyle) :
++                 bool readProperties, Properties::ReadStyle readStyle) :
+   TagLib::File(stream),
+   d(new FilePrivate(frameFactory))
+ {
+   if(isOpen())
+-    read(readProperties);
++    read(readProperties, readStyle);
+ }
+ 
+ MPEG::File::~File()
+@@ -441,11 +442,11 @@ bool MPEG::File::hasAPETag() const
+ // private members
+ ////////////////////////////////////////////////////////////////////////////////
+ 
+-void MPEG::File::read(bool readProperties)
++void MPEG::File::read(bool readProperties, Properties::ReadStyle readStyle)
+ {
+   // Look for an ID3v2 tag
+ 
+-  d->ID3v2Location = findID3v2();
++  d->ID3v2Location = findID3v2(readStyle);
+ 
+   if(d->ID3v2Location >= 0) {
+     d->tag.set(ID3v2Index, new ID3v2::Tag(this, d->ID3v2Location, d->ID3v2FrameFactory));
+@@ -478,7 +479,7 @@ void MPEG::File::read(bool readProperties)
+   ID3v1Tag(true);
+ }
+ 
+-long MPEG::File::findID3v2()
++long MPEG::File::findID3v2(Properties::ReadStyle readStyle)
+ {
+   if(!isValid())
+     return -1;
+@@ -499,6 +500,9 @@ long MPEG::File::findID3v2()
+   if(firstSyncByte(data[0]) && secondSynchByte(data[1]))
+     return -1;
+ 
++  if(readStyle < Properties::ReadStyle::Accurate)
++    return -1;
++
+   // Look for the entire file, if neither an MEPG frame or ID3v2 tag was found
+   // at the beginning of the file.
+   // We don't care about the inefficiency of the code, since this is a seldom case.
+diff --git a/taglib/mpeg/mpegfile.h b/taglib/mpeg/mpegfile.h
+index e9e97387..fb04c625 100644
+--- a/taglib/mpeg/mpegfile.h
++++ b/taglib/mpeg/mpegfile.h
+@@ -74,7 +74,8 @@ namespace TagLib {
+        * Constructs an MPEG file from \a file.  If \a readProperties is true the
+        * file's audio properties will also be read.
+        *
+-       * \note In the current implementation, \a propertiesStyle is ignored.
++       * If \a propertiesStyle is Accurate, the file will be scanned
++       * completely if no ID3v2 tag or MPEG sync code is found at the start.
+        *
+        * \deprecated This constructor will be dropped in favor of the one below
+        * in a future version.
+@@ -89,7 +90,8 @@ namespace TagLib {
+        * If this file contains and ID3v2 tag the frames will be created using
+        * \a frameFactory.
+        *
+-       * \note In the current implementation, \a propertiesStyle is ignored.
++       * If \a propertiesStyle is Accurate, the file will be scanned
++       * completely if no ID3v2 tag or MPEG sync code is found at the start.
+        */
+       // BIC: merge with the above constructor
+       File(FileName file, ID3v2::FrameFactory *frameFactory,
+@@ -106,7 +108,8 @@ namespace TagLib {
+        * If this file contains and ID3v2 tag the frames will be created using
+        * \a frameFactory.
+        *
+-       * \note In the current implementation, \a propertiesStyle is ignored.
++       * If \a propertiesStyle is Accurate, the file will be scanned
++       * completely if no ID3v2 tag or MPEG sync code is found at the start.
+        */
+       File(IOStream *stream, ID3v2::FrameFactory *frameFactory,
+            bool readProperties = true,
+@@ -374,8 +377,8 @@ namespace TagLib {
+       File(const File &);
+       File &operator=(const File &);
+ 
+-      void read(bool readProperties);
+-      long findID3v2();
++      void read(bool readProperties, Properties::ReadStyle);
++      long findID3v2(Properties::ReadStyle);
+ 
+       class FilePrivate;
+       FilePrivate *d;
+diff --git a/taglib/toolkit/taglib.h b/taglib/toolkit/taglib.h
+index bd4886bd..dfabe3d4 100644
+--- a/taglib/toolkit/taglib.h
++++ b/taglib/toolkit/taglib.h
+@@ -44,6 +44,9 @@
+ #define TAGLIB_CONSTRUCT_BITSET(x) static_cast<unsigned long>(x)
+ #endif
+ 
++/* VLC Specific patches implementations */
++#define VLC_PATCHED_TAGLIB_ID3V2_READSTYLE
++
+ #include <string>
+ 
+ //! A namespace for all TagLib related classes and functions
+-- 
+2.25.4
+
diff --git a/contrib/src/taglib/rules.mak b/contrib/src/taglib/rules.mak
index 9568c973aa..b6204859e9 100644
--- a/contrib/src/taglib/rules.mak
+++ b/contrib/src/taglib/rules.mak
@@ -19,6 +19,7 @@ taglib: taglib-$(TAGLIB_VERSION).tar.gz .sum-taglib
 	$(APPLY) $(SRC)/taglib/0002-use-GetFileInformationByHandleEx-on-newer-builds-of-.patch
 	$(APPLY) $(SRC)/taglib/0003-don-t-use-CreateFile-in-UWP-builds.patch
 	$(APPLY) $(SRC)/taglib/use_resolvers_on_streams.patch
+	$(APPLY) $(SRC)/taglib/0001-Implement-ID3v2-readStyle-avoid-worst-case.patch
 	$(MOVE)
 
 .taglib: taglib toolchain.cmake
diff --git a/modules/meta_engine/taglib.cpp b/modules/meta_engine/taglib.cpp
index 123d09c94f..04a44c30e8 100644
--- a/modules/meta_engine/taglib.cpp
+++ b/modules/meta_engine/taglib.cpp
@@ -56,17 +56,13 @@
                                    TAGLIB_MINOR_VERSION, \
                                    TAGLIB_PATCH_VERSION)
 
-#define TAGLIB_VERSION_1_11 VERSION_INT(1,11,0)
-
 #include <fileref.h>
 #include <tag.h>
 #include <tbytevector.h>
 
 /* Support for stream-based metadata */
-#if TAGLIB_VERSION >= TAGLIB_VERSION_1_11
-# include <vlc_access.h>
-# include <tiostream.h>
-#endif
+#include <vlc_access.h>
+#include <tiostream.h>
 
 #include <apefile.h>
 #include <asffile.h>
@@ -96,6 +92,7 @@ using namespace TagLib;
 
 
 #include <algorithm>
+#include <limits>
 
 namespace VLCTagLib
 {
@@ -136,10 +133,7 @@ File *VLCTagLib::ExtResolver<T>::createFile(FileName fileName, bool, AudioProper
     return 0;
 }
 
-#if TAGLIB_VERSION >= TAGLIB_VERSION_1_11
 static VLCTagLib::ExtResolver<MPEG::File> aacresolver(".aac");
-#endif
-static VLCTagLib::ExtResolver<MP4::File> m4vresolver(".m4v");
 static bool b_extensions_registered = false;
 
 // taglib is not thread safe
@@ -157,13 +151,15 @@ vlc_module_begin ()
         set_callbacks( WriteMeta, NULL )
 vlc_module_end ()
 
-#if TAGLIB_VERSION >= TAGLIB_VERSION_1_11
 class VlcIostream : public IOStream
 {
 public:
     VlcIostream(stream_t* p_stream)
         : m_stream( p_stream )
         , m_previousPos( 0 )
+        , m_borked( false )
+        , m_seqReadLength( 0 )
+        , m_seqReadLimit( std::numeric_limits<long>::max() )
     {
     }
 
@@ -174,17 +170,23 @@ public:
 
     FileName name() const
     {
-        return m_stream->psz_location;
+        // Taglib only cares about the file name part, so it doesn't matter
+        // whether we include the mrl scheme or not
+        return m_stream->psz_url;
     }
 
     ByteVector readBlock(ulong length)
     {
+        if(m_borked || m_seqReadLength >= m_seqReadLimit)
+           return ByteVector::null;
         ByteVector res(length, 0);
         ssize_t i_read = vlc_stream_Read( m_stream, res.data(), length);
         if (i_read < 0)
             return ByteVector::null;
         else if ((size_t)i_read != length)
             res.resize(i_read);
+        m_previousPos += i_read;
+        m_seqReadLength += i_read;
         return res;
     }
 
@@ -211,22 +213,39 @@ public:
         return true;
     }
 
+    void setMaxSequentialRead(long s)
+    {
+        m_seqReadLimit = s;
+    }
+
     void seek(long offset, Position p)
     {
         uint64_t pos = 0;
+        long len;
         switch (p)
         {
             case Current:
                 pos = m_previousPos;
                 break;
             case End:
-                pos = length();
+                len = length();
+                if(len > -1)
+                {
+                    pos = len;
+                }
+                else
+                {
+                    m_borked = true;
+                    return;
+                }
                 break;
             default:
                 break;
         }
-        if (vlc_stream_Seek( m_stream, pos + offset ) == 0)
+        m_borked = (vlc_stream_Seek( m_stream, pos + offset ) != 0);
+        if(!m_borked)
             m_previousPos = pos + offset;
+        m_seqReadLength = 0;
     }
 
     void clear()
@@ -254,8 +273,10 @@ public:
 private:
     stream_t* m_stream;
     int64_t m_previousPos;
+    bool m_borked;
+    long m_seqReadLength;
+    long m_seqReadLimit;
 };
-#endif /* TAGLIB_VERSION_1_11 */
 
 static int ExtractCoupleNumberValues( vlc_meta_t* p_meta, const char *psz_value,
         vlc_meta_type_t first, vlc_meta_type_t second)
@@ -458,6 +479,114 @@ static void ReadMetaFromASF( ASF::Tag* tag, demux_meta_t* p_demux_meta, vlc_meta
     }
 }
 
+/**
+ * Fills attachments list from ID3 APIC tags
+ * @param tag: the APIC tags list
+ * @param p_demux_meta: the demuxer meta
+ * @param p_meta: the meta
+ */
+static void ProcessAPICListFromId3v2( const ID3v2::FrameList &list,
+                                      demux_meta_t* p_demux_meta, vlc_meta_t* p_meta )
+{
+    /* Preferred type of image
+     * The 21 types are defined in id3v2 standard:
+     * http://www.id3.org/id3v2.4.0-frames */
+    static const uint8_t scores[] = {
+        0,  /* Other */
+        5,  /* 32x32 PNG image that should be used as the file icon */
+        4,  /* File icon of a different size or format. */
+        20, /* Front cover image of the album. */
+        19, /* Back cover image of the album. */
+        13, /* Inside leaflet page of the album. */
+        18, /* Image from the album itself. */
+        17, /* Picture of the lead artist or soloist. */
+        16, /* Picture of the artist or performer. */
+        14, /* Picture of the conductor. */
+        15, /* Picture of the band or orchestra. */
+        9,  /* Picture of the composer. */
+        8,  /* Picture of the lyricist or text writer. */
+        7,  /* Picture of the recording location or studio. */
+        10, /* Picture of the artists during recording. */
+        11, /* Picture of the artists during performance. */
+        6,  /* Picture from a movie or video related to the track. */
+        1,  /* Picture of a large, coloured fish. */
+        12, /* Illustration related to the track. */
+        3,  /* Logo of the band or performer. */
+        2   /* Logo of the publisher (record company). */
+    };
+
+    const ID3v2::AttachedPictureFrame *defaultPic = nullptr;
+    for( auto iter = list.begin(); iter != list.end(); ++iter )
+    {
+        const ID3v2::AttachedPictureFrame* p =
+                dynamic_cast<const ID3v2::AttachedPictureFrame*>(*iter);
+        if( !p )
+            continue;
+        if(defaultPic == nullptr)
+        {
+            defaultPic = p;
+        }
+        else
+        {
+            int scorea = defaultPic->type() >= ARRAY_SIZE(scores) ? 0 : scores[defaultPic->type()];
+            int scoreb = p->type() >= ARRAY_SIZE(scores) ? 0 : scores[p->type()];
+            if(scoreb > scorea)
+                defaultPic = p;
+        }
+    }
+
+    for( auto iter = list.begin(); iter != list.end(); ++iter )
+    {
+        const ID3v2::AttachedPictureFrame* p =
+                dynamic_cast<const ID3v2::AttachedPictureFrame*>(*iter);
+        if( !p )
+            continue;
+        // Get the mime and description of the image.
+        String description = p->description();
+        String mimeType = p->mimeType();
+
+        /* some old iTunes version not only sets incorrectly the mime type
+         * or the description of the image,
+         * but also embeds incorrectly the image.
+         * Recent versions seem to behave correctly */
+        if( mimeType == "PNG" || description == "\xC2\x89PNG" )
+        {
+            msg_Warn( p_demux_meta, "Invalid picture embedded by broken iTunes version" );
+            continue;
+        }
+
+        char *psz_name;
+        if( asprintf( &psz_name, "%i", p_demux_meta->i_attachments ) == -1 )
+            continue;
+
+        input_attachment_t *p_attachment =
+                vlc_input_attachment_New( psz_name,
+                                          mimeType.toCString(),
+                                          description.toCString(),
+                                          p->picture().data(),
+                                          p->picture().size() );
+        free( psz_name );
+        if( !p_attachment )
+            continue;
+
+        msg_Dbg( p_demux_meta, "Found embedded art: %s (%zu bytes)",
+                 p_attachment->psz_mime, p_attachment->i_data );
+
+        TAB_APPEND_CAST( (input_attachment_t**),
+                         p_demux_meta->i_attachments, p_demux_meta->attachments,
+                         p_attachment );
+
+        if( p == defaultPic )
+        {
+            char *psz_url;
+            if( asprintf( &psz_url, "attachment://%s",
+                          p_attachment->psz_name ) == -1 )
+                continue;
+            vlc_meta_SetArtURL( p_meta, psz_url );
+            free( psz_url );
+        }
+    }
+}
 
 /**
  * Read meta information from id3v2 tags
@@ -552,115 +681,12 @@ static void ReadMetaFromId3v2( ID3v2::Tag* tag, demux_meta_t* p_demux_meta, vlc_
                 vlc_meta_DiscNumber, vlc_meta_DiscTotal );
     }
 
-    /* Preferred type of image
-     * The 21 types are defined in id3v2 standard:
-     * http://www.id3.org/id3v2.4.0-frames */
-    static const int pi_cover_score[] = {
-        0,  /* Other */
-        5,  /* 32x32 PNG image that should be used as the file icon */
-        4,  /* File icon of a different size or format. */
-        20, /* Front cover image of the album. */
-        19, /* Back cover image of the album. */
-        13, /* Inside leaflet page of the album. */
-        18, /* Image from the album itself. */
-        17, /* Picture of the lead artist or soloist. */
-        16, /* Picture of the artist or performer. */
-        14, /* Picture of the conductor. */
-        15, /* Picture of the band or orchestra. */
-        9,  /* Picture of the composer. */
-        8,  /* Picture of the lyricist or text writer. */
-        7,  /* Picture of the recording location or studio. */
-        10, /* Picture of the artists during recording. */
-        11, /* Picture of the artists during performance. */
-        6,  /* Picture from a movie or video related to the track. */
-        1,  /* Picture of a large, coloured fish. */
-        12, /* Illustration related to the track. */
-        3,  /* Logo of the band or performer. */
-        2   /* Logo of the publisher (record company). */
-    };
-    #define PI_COVER_SCORE_SIZE (sizeof (pi_cover_score) / sizeof (pi_cover_score[0]))
-    int i_score = -1;
-
     // Try now to get embedded art
     list = tag->frameListMap()[ "APIC" ];
-    if( list.isEmpty() )
-        return;
-
-    for( iter = list.begin(); iter != list.end(); iter++ )
-    {
-        ID3v2::AttachedPictureFrame* p_apic =
-            dynamic_cast<ID3v2::AttachedPictureFrame*>(*iter);
-        if( !p_apic )
-            continue;
-        input_attachment_t *p_attachment;
-
-        const char *psz_mime;
-        char *psz_name, *psz_description;
-
-        // Get the mime and description of the image.
-        // If the description is empty, take the type as a description
-        psz_mime = p_apic->mimeType().toCString( true );
-        if( p_apic->description().size() > 0 )
-            psz_description = strdup( p_apic->description().toCString( true ) );
-        else
-        {
-            if( asprintf( &psz_description, "%i", p_apic->type() ) == -1 )
-                psz_description = NULL;
-        }
-
-        if( !psz_description )
-            continue;
-        psz_name = psz_description;
-
-        /* some old iTunes version not only sets incorrectly the mime type
-         * or the description of the image,
-         * but also embeds incorrectly the image.
-         * Recent versions seem to behave correctly */
-        if( !strncmp( psz_mime, "PNG", 3 ) ||
-            !strncmp( psz_name, "\xC2\x89PNG", 5 ) )
-        {
-            msg_Warn( p_demux_meta, "Invalid picture embedded by broken iTunes version" );
-            free( psz_description );
-            continue;
-        }
-
-        const ByteVector picture = p_apic->picture();
-        const char *p_data = picture.data();
-        const unsigned i_data = picture.size();
-
-        msg_Dbg( p_demux_meta, "Found embedded art: %s (%s) is %u bytes",
-                 psz_name, psz_mime, i_data );
-
-        p_attachment = vlc_input_attachment_New( psz_name, psz_mime,
-                                psz_description, p_data, i_data );
-        if( !p_attachment )
-        {
-            free( psz_description );
-            continue;
-        }
-        TAB_APPEND_CAST( (input_attachment_t**),
-                         p_demux_meta->i_attachments, p_demux_meta->attachments,
-                         p_attachment );
-        free( psz_description );
-
-        unsigned i_pic_type = p_apic->type();
-        if( i_pic_type >= PI_COVER_SCORE_SIZE )
-            i_pic_type = 0; // Defaults to "Other"
-
-        if( pi_cover_score[i_pic_type] > i_score )
-        {
-            i_score = pi_cover_score[i_pic_type];
-            char *psz_url;
-            if( asprintf( &psz_url, "attachment://%s",
-                          p_attachment->psz_name ) == -1 )
-                continue;
-            vlc_meta_SetArtURL( p_meta, psz_url );
-            free( psz_url );
-        }
-    }
+    if( !list.isEmpty() )
+        ProcessAPICListFromId3v2( list, p_demux_meta, p_meta );
 }
 
-
 /**
  * Read the meta information from XiphComments
  * @param tag: the Xiph Comment
@@ -669,17 +695,20 @@ static void ReadMetaFromId3v2( ID3v2::Tag* tag, demux_meta_t* p_demux_meta, vlc_
  */
 static void ReadMetaFromXiph( Ogg::XiphComment* tag, demux_meta_t* p_demux_meta, vlc_meta_t* p_meta )
 {
-    StringList list;
     bool hasTrackTotal = false;
-#define SET( keyName, metaName )                                               \
-    list = tag->fieldListMap()[keyName];                                       \
-    if( !list.isEmpty() )                                                      \
-        vlc_meta_Set##metaName( p_meta, (*list.begin()).toCString( true ) );
+#define SET( keyName, metaName ) \
+    { \
+        StringList tmp_list { tag->fieldListMap()[keyName] }; \
+        if( !tmp_list.isEmpty() ) \
+            vlc_meta_Set##metaName( p_meta, (*tmp_list.begin()).toCString( true ) ); \
+    }
 
 #define SET_EXTRA( keyName, metaName ) \
-    list = tag->fieldListMap()[keyName]; \
-    if( !list.isEmpty() ) \
-        vlc_meta_AddExtra( p_meta, keyName, (*list.begin()).toCString( true ) );
+    { \
+        StringList tmp_list = tag->fieldListMap()[keyName]; \
+        if( !tmp_list.isEmpty() ) \
+            vlc_meta_AddExtra( p_meta, keyName, (*tmp_list.begin()).toCString( true ) ); \
+    }
 
     SET( "COPYRIGHT", Copyright );
     SET( "ORGANIZATION", Publisher );
@@ -695,25 +724,31 @@ static void ReadMetaFromXiph( Ogg::XiphComment* tag, demux_meta_t* p_demux_meta,
 #undef SET
 #undef SET_EXTRA
 
-    list = tag->fieldListMap()["TRACKNUMBER"];
-    if( !list.isEmpty() )
+    StringList track_number_list = tag->fieldListMap()["TRACKNUMBER"];
+    if( !track_number_list.isEmpty() )
     {
-        int i_values = ExtractCoupleNumberValues( p_meta, (*list.begin()).toCString( true ),
+        int i_values = ExtractCoupleNumberValues( p_meta, (*track_number_list.begin()).toCString( true ),
                  vlc_meta_TrackNumber, vlc_meta_TrackTotal );
         hasTrackTotal = i_values == 2;
     }
     if( !hasTrackTotal )
     {
-        list = tag->fieldListMap()["TRACKTOTAL"];
-        if( list.isEmpty() )
-            list = tag->fieldListMap()["TOTALTRACKS"];
-        if( !list.isEmpty() )
-            vlc_meta_SetTrackTotal( p_meta, (*list.begin()).toCString( true ) );
+        StringList track_total_list { tag->fieldListMap()["TRACKTOTAL"] };
+        if( track_total_list.isEmpty() )
+        {
+            StringList total_tracks_list { tag->fieldListMap()["TOTALTRACKS"] };
+            if( !total_tracks_list.isEmpty() )
+                vlc_meta_SetTrackTotal( p_meta, (*total_tracks_list.begin()).toCString( true ) );
+        }
+        else
+        {
+            vlc_meta_SetTrackTotal( p_meta, (*track_total_list.begin()).toCString( true ) );
+        }
     }
 
     // Try now to get embedded art
-    StringList mime_list = tag->fieldListMap()[ "COVERARTMIME" ];
-    StringList art_list = tag->fieldListMap()[ "COVERART" ];
+    StringList mime_list { tag->fieldListMap()[ "COVERARTMIME" ] };
+    StringList art_list { tag->fieldListMap()[ "COVERART" ] };
 
     input_attachment_t *p_attachment;
 
@@ -740,14 +775,14 @@ static void ReadMetaFromXiph( Ogg::XiphComment* tag, demux_meta_t* p_demux_meta,
     }
     else
     {
-        art_list = tag->fieldListMap()[ "METADATA_BLOCK_PICTURE" ];
-        if( art_list.size() == 0 )
+        StringList block_picture_list { tag->fieldListMap()[ "METADATA_BLOCK_PICTURE" ] };
+        if( block_picture_list.size() == 0 )
             return;
 
         uint8_t *p_data;
         int i_cover_score;
         int i_cover_idx;
-        int i_data = vlc_b64_decode_binary( &p_data, art_list[0].toCString(true) );
+        int i_data = vlc_b64_decode_binary( &p_data, block_picture_list[0].toCString(true) );
         i_cover_score = i_cover_idx = 0;
         /* TODO: Use i_cover_score / i_cover_idx to select the picture. */
         p_attachment = ParseFlacPicture( p_data, i_data, 0,
@@ -817,6 +852,23 @@ static void ReadMetaFromMP4( MP4::Tag* tag, demux_meta_t *p_demux_meta, vlc_meta
     }
 }
 
+static bool isSchemeCompatible( const char *psz_uri )
+{
+    const char *p = strstr( psz_uri, "://" );
+    if( p == NULL )
+        return false;
+
+    size_t i_len = p - psz_uri;
+    const char * compatibleschemes[] =
+    {
+        "file", "smb",
+    };
+    for( size_t i=0; i<ARRAY_SIZE(compatibleschemes); i++ )
+        if( !strncasecmp( psz_uri, compatibleschemes[i], i_len ) )
+            return true;
+    return false;
+}
+
 /**
  * Get the tags from the file using TagLib
  * @param p_this: the demux object
@@ -835,50 +887,35 @@ static int ReadMeta( vlc_object_t* p_this)
     if( unlikely(psz_uri == NULL) )
         return VLC_ENOMEM;
 
-    char *psz_path = vlc_uri2path( psz_uri );
-#if VLC_WINSTORE_APP && TAGLIB_VERSION >= TAGLIB_VERSION_1_11
-    if( psz_path == NULL )
+    if( !isSchemeCompatible( psz_uri ) )
     {
         free( psz_uri );
         return VLC_EGENERIC;
     }
-    free( psz_path );
-
-    stream_t *p_stream = vlc_access_NewMRL( p_this, psz_uri );
-    free( psz_uri );
-    if( p_stream == NULL )
-        return VLC_EGENERIC;
-
-    VlcIostream s( p_stream );
-    f = FileRef( &s );
-#else /* VLC_WINSTORE_APP */
-    free( psz_uri );
-    if( psz_path == NULL )
-        return VLC_EGENERIC;
 
     if( !b_extensions_registered )
     {
-#if TAGLIB_VERSION >= TAGLIB_VERSION_1_11
         FileRef::addFileTypeResolver( &aacresolver );
-#endif
-        FileRef::addFileTypeResolver( &m4vresolver );
         b_extensions_registered = true;
     }
 
-#if defined(_WIN32)
-    wchar_t *wpath = ToWide( psz_path );
-    if( wpath == NULL )
-    {
-        free( psz_path );
+    stream_t *p_stream = vlc_access_NewMRL( p_this, psz_uri );
+    free( psz_uri );
+    if( p_stream == NULL )
         return VLC_EGENERIC;
-    }
-    f = FileRef( wpath );
-    free( wpath );
-#else
-    f = FileRef( psz_path );
+    stream_t* p_filter = vlc_stream_FilterNew( p_stream, "prefetch,cache" );
+    if( p_filter )
+        p_stream = p_filter;
+
+    VlcIostream s( p_stream );
+#ifndef VLC_PATCHED_TAGLIB_ID3V2_READSTYLE
+    uint64_t dummy;
+    if( vlc_stream_GetSize( p_stream, &dummy ) != VLC_SUCCESS )
+        s.setMaxSequentialRead( 2048 );
+    else
+        s.setMaxSequentialRead( 1024 * 2048 );
 #endif
-    free( psz_path );
-#endif /* VLC_WINSTORE_APP */
+    f = FileRef( &s, false, AudioProperties::ReadStyle::Fast );
 
     if( f.isNull() )
         return VLC_EGENERIC;
-- 
2.30.1

